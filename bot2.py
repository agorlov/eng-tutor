import logging
from traceback_with_variables import print_exc

from config import TG_BOT_TOKEN

import telebot
from src.agent_main import AgentMain
from src.agent_translator import AgentTranslator
from src.agent_session_planner import AgentSessionPlanner
from src.agent_teacher import AgentTeacher
from src.agent_archiver import AgentArchiver


# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

tg = telebot.TeleBot(TG_BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# user_id: { 'agent' : AgentMain, main_context: [], agents: {}, settings: {} }
# todo: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ state
user_context = {}

def init_user_context(user_id):
    if user_id in user_context:
        return
    
    user_context[user_id] = {
        'agent': None,
        'main_context': [],
        'agents': {},
        'settings': {} # todo –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–¥ —Å—á–∏—Ç—ã–≤–∞—é—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ AgentMain (–∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è UserSettings)
    }

    user_context[user_id]['agents'] = {
        'Main': AgentMain(tg, user_context[user_id], user_id),
        'Translator': AgentTranslator(tg, user_context[user_id], user_id),
        'Session Planner': AgentSessionPlanner(tg, user_context[user_id], user_id),
        'Teacher': AgentTeacher(tg, user_context[user_id], user_id),
        'Archiver': AgentArchiver(tg, user_context[user_id], user_id),
    }

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∞–≥–µ–Ω—Ç–∞ Main
    user_context[user_id]['agent'] = user_context[user_id]['agents']['Main']

# /start
@tg.message_handler(commands=['start'])
def start(message):
    tg.send_message(message.chat.id, """
üéâ –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞. üåü

–Ø —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–µ–∑ —Å–∫—É–∫–∏! üòä

–í–æ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å:
1. –Ø –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ñ—Ä–∞–∑—ã, –∞ —Ç—ã - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å, —ç—Ç–æ –∫–∞–∫ –∏–≥—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—É—á–∏—Ç —Ç–µ–±—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!
2. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂—É. üìö
3. –ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: "–ü–µ—Ä–µ–≤–µ–¥–∏: —Ç–≤–æ—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç", –∏ —è –Ω–∞ –ø–æ–º–æ—â—å! üìñ
    """)


@tg.message_handler(func=lambda message: True)
def respond(message):
    user_id = message.chat.id
    logging.info(f"Rcv {user_id}: {message.text}")

    init_user_context(user_id)
    
    agent = user_context[user_id]['agent']
    agent.run(message.text)


try:
    tg.polling(none_stop=True)
except Exception as e:
    print_exc()
    exit(1)
