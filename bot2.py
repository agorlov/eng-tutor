import logging
import asyncio

from config import TG_BOT_TOKEN

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from src.agent_main import AgentMain
from src.agent_translator import AgentTranslator
from src.agent_session_planner import AgentSessionPlanner
from src.agent_teacher import AgentTeacher
from src.agent_archiver import AgentArchiver
from src.user_saved import UserSaved
from src.voice_handler import Voice_handler

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –∫–ª–∞—Å—Å–∞
user_saved = UserSaved()
voice_handler = Voice_handler()

bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# user_id: { 'agent' : AgentMain, main_context: [], agents: {}, settings: {} }
# todo: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ state
user_context = {}


def init_user_context(message: Message, user_id):
    if user_id in user_context:
        return

    user_context[user_id] = {
        'agent': None,
        'main_context': [],
        'agents': {},
        'settings': {}  # todo –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–¥ —Å—á–∏—Ç—ã–≤–∞—é—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ AgentMain (–∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è UserSettings)
    }

    user_context[user_id]['agents'] = {
        'Main': AgentMain(message, user_context[user_id], user_id),
        'Translator': AgentTranslator(message, user_context[user_id], user_id),
        'Session Planner': AgentSessionPlanner(message, user_context[user_id], user_id),
        'Teacher': AgentTeacher(message, user_context[user_id], user_id),
        'Archiver': AgentArchiver(message, user_context[user_id], user_id),
    }

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∞–≥–µ–Ω—Ç–∞ Main
    user_context[user_id]['agent'] = user_context[user_id]['agents']['Main']


# /start
@dp.message(CommandStart())
async def start(message):
    user_language = message.from_user.language_code
    logger.info("!User Language: %s", user_language)

    if user_language == 'ru':
        await message.answer("""
üéâ –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞. üåü

–Ø —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–µ–∑ —Å–∫—É–∫–∏! üòä

–í–æ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å:
1. –Ø –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ñ—Ä–∞–∑—ã, –∞ —Ç—ã - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å, —ç—Ç–æ –∫–∞–∫ –∏–≥—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—É—á–∏—Ç —Ç–µ–±—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!
2. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É –¥–ª—è —É—Ä–æ–∫–∞, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂—É. üìö
3. –ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: "–ü–µ—Ä–µ–≤–µ–¥–∏: —Ç–≤–æ—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç", –∏ —è –Ω–∞ –ø–æ–º–æ—â—å! üìñ
        """)
    else:
        await message.answer("""
üéâ Hi! My name is Anna. üåü

I'm here to help you learn a foreign language without any boredom! üòä

Here's how it will work:
1. I will suggest phrases, and you will translate and memorize them. It's like a game that will teach you how to formulate thoughts in a foreign language!
2. If you want, you can suggest your own topic for the lesson, and I will gladly support you. üìö
3. Need a translation? Just write: "Translate: your phrase or text", and I‚Äôll come to the rescue! üìñ
        """)


@dp.message()
async def respond(message: Message):
    user_id = message.chat.id
    username = message.from_user.username

    #init_user_context(message, user_id)

    #  –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞
    if message.content_type == types.ContentType.VOICE:
        agent = user_context[user_id]['agent']
        audio_file_path = await voice_handler.download_file(user_id, message, bot, agent)

        if audio_file_path:
            audio_answer = await voice_handler.recognize(audio_file_path, message)

            logging.info(f"[Audio] Rcv {user_id}: {audio_answer}")

            init_user_context(audio_answer, user_id)

            await agent.run(audio_answer)

    #  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    elif message.content_type == types.ContentType.TEXT:
        logging.info(f"[Text] Rcv {user_id}: {message.text}")
        init_user_context(message, user_id)

        agent = user_context[user_id]['agent']
        await agent.run(message.text)

    user_saved.save_user(user_id, username)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
