import logging

from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery

from src.user_settings import UserSettings

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

router = Router(name=__name__)

user_settings_dict = {}

class UserSettingsAsk:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id):
        self.user_id = user_id
        self.builder = InlineKeyboardBuilder()
        self.native_language = None
        self.studied_language = None
        self.studied_level = None

    def keyboard_settings(self):
        self.builder.button(text="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="change")
        self.builder.button(text="–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="delete")
        self.builder.adjust(2, 1)
        return self.builder.as_markup()

    def generate_keyboard(self, options, callback_prefix):
        self.builder = InlineKeyboardBuilder()  # –û–±–Ω—É–ª–µ–Ω–∏–µ –±–∏–ª–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for option in options:
            self.builder.button(text=option[0], callback_data=f"{callback_prefix}_{option[1]}")
        self.builder.adjust(1, 3)
        return self.builder.as_markup()

@router.callback_query(F.data == "change")
async def change_settings(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_settings_handler = UserSettingsAsk(user_id)
    user_settings_dict[user_id] = user_settings_handler  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å

    await callback_query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫',
                                        reply_markup=user_settings_handler.generate_keyboard(
                                            [("–†—É—Å—Å–∫–∏–π", "ru"), ("–ö–∞–∑–∞—Ö—Å–∫–∏–π", "kz"), ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en")],
                                            "native_lang"))

@router.callback_query(lambda call: call.data.startswith("native_lang_"))
async def set_native_language(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_settings_handler = user_settings_dict.get(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    if not user_settings_handler:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_settings_handler.native_language = callback_query.data.split("_")[-1].capitalize()
    logger.info("!!! native language: %s", user_settings_handler.native_language)
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫',
                                        reply_markup=user_settings_handler.generate_keyboard(
                                            [("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en"), ("–†—É—Å—Å–∫–∏–π", "ru"), ("–ö–∞–∑–∞—Ö—Å–∫–∏–π", "kz")],
                                            "studied_lang"))

@router.callback_query(lambda call: call.data.startswith("studied_lang_"))
async def set_studied_language(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_settings_handler = user_settings_dict.get(user_id)

    if not user_settings_handler:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_settings_handler.studied_language = callback_query.data.split("_")[-1].capitalize()
    logger.info("!!! studied language: %s", user_settings_handler.studied_language)
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞',
                                        reply_markup=user_settings_handler.generate_keyboard(
                                            [("–ù–∞—á–∞–ª—å–Ω—ã–π", "beginner"), ("–°—Ä–µ–¥–Ω–∏–π", "intermediate"),
                                             ("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "pro")], "level"))

@router.callback_query(lambda call: call.data.startswith("level_"))
async def save_user_settings(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_settings_handler = user_settings_dict.get(user_id)
    if not user_settings_handler:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_settings_handler.studied_level = callback_query.data.split("_")[-1].capitalize()
    logger.info("!!! studied level: %s", user_settings_handler.studied_level)
    user_settings = UserSettings(user_id)

    user_settings.save(f"""Native language: {user_settings_handler.native_language}
    Studied language: {user_settings_handler.studied_language}
    Student level: {user_settings_handler.studied_level}
        """)

    await callback_query.message.answer("""
    üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üåü

    –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. üòä

    –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?

    –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üìö
    –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏! üìù
        """)


@router.callback_query(F.data == "delete")
async def delete_settings(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_settings = UserSettings(user_id)

    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    try:
        user_settings.delete()
        await callback_query.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
